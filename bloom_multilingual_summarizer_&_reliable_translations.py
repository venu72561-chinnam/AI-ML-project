# -*- coding: utf-8 -*-
"""BLOOM Multilingual Summarizer & Reliable Translations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Pm0tCWzd1hyoK50O7cJMahpKgZYUEGV
"""

!pip install transformers accelerate gradio newspaper3k lxml_html_clean langdetect -q

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, AutoModelForSeq2SeqLM, AutoTokenizer

from newspaper import Article

from langdetect import detect, DetectorFactory

import gradio as gr,time,torch

DetectorFactory.seed = 0

BLOOM_MODEL = "bigscience/bloom-1b1"

MARIAN_MODELS = {
    "hi": "Helsinki-NLP/opus-mt-en-hi",
    "fr": "Helsinki-NLP/opus-mt-en-fr",
    "es": "Helsinki-NLP/opus-mt-en-es"
}

device = 0 if torch.cuda.is_available() else -1

tokenizer = AutoTokenizer.from_pretrained(BLOOM_MODEL)
model = AutoModelForCausalLM.from_pretrained(BLOOM_MODEL)
generator = pipeline("text-generation", model=model, tokenizer=tokenizer, device_map="auto")

marian_cache = {}

def load_marian(lang_code):
    """Load Marian model+tokenizer lazily and cache."""
    if lang_code in marian_cache:
        return marian_cache[lang_code]
    model_name = MARIAN_MODELS.get(lang_code)
    if not model_name:
        return None
    tok = AutoTokenizer.from_pretrained(model_name)
    mod = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    pipe = pipeline("translation", model=mod, tokenizer=tok, device=0 if torch.cuda.is_available() else -1)
    marian_cache[lang_code] = pipe
    return pipe

def fetch_article(url):
    try:
        art = Article(url)
        art.download()
        art.parse()
        txt = art.text
        if not txt or len(txt) < 50:
            return "Error: unable to extract enough article text. Try another URL or paste article text."
        return txt
    except Exception as e:
        return f"⚠️ Error fetching article: {e}"

def clean_generated_text(generated, prompt):
    # Remove the prompt prefix if present and strip whitespace
    if isinstance(generated, str):
        out = generated
    else:
        out = generated[0].get('generated_text', '')
    # sometimes the model echoes the prompt; remove the prompt if found
    if prompt and prompt in out:
        out = out.replace(prompt, '')
    return out.strip()

def summarize_text(text, max_tokens=140):
    prompt = f"Summarize the following news article in clear, concise English. Produce one short paragraph (3-5 sentences). Do NOT add your own opinions.\n\nArticle:\n{text}\n\nSummary:"
    # generate
    res = generator(prompt, max_new_tokens=max_tokens, temperature=0.3, top_p=0.9, do_sample=False)
    summary = clean_generated_text(res, prompt)
    # if model repeats the article or is too long, truncate heuristically to first 3 sentences
    sentences = summary.replace("\n", " ").split(". ")
    if len(sentences) > 4:
        summary = ". ".join(sentences[:3]).strip()
        if not summary.endswith("."):
            summary += "."
    return summary

def translate_with_bloom(english_text, target_lang_name, max_tokens=140):
    # Strict instruction to produce only translation in the target language, no extras
    prompt = (f"Translate the following English text into {target_lang_name}.\n"
              f"Return ONLY the translated text. Do NOT include the original English, explanations, or labels.\n\nText:\n{english_text}\n\nTranslation:")
    res = generator(prompt, max_new_tokens=max_tokens, temperature=0.2, top_p=0.9, do_sample=False)
    translated = clean_generated_text(res, prompt)
    return translated

def detect_language_safe(text):
    try:
        lang = detect(text)
        return lang
    except:
        return None

def translate_text_with_fallback(text, target_lang_name):
    # map language name to code
    name_to_code = {"Hindi":"hi","French":"fr","Spanish":"es","English":"en"}
    target_code = name_to_code.get(target_lang_name, None)
    if not target_code:
        # unknown target; attempt BLOOM translation anyway
        bloom_out = translate_with_bloom(text, target_lang_name)
        return bloom_out

    # First attempt: BLOOM strict prompt
    bloom_out = translate_with_bloom(text, target_lang_name)
    out_lang = detect_language_safe(bloom_out)
    # If bloom_out seems to be in the correct language (or detection uncertain), accept it
    if out_lang == target_code:
        return bloom_out

    # If BLOOM didn't produce desired language, fallback to Marian/OPUS models
    marian = load_marian(target_code)
    if marian:
        try:
            # Marian pipelines expect plain English input
            marian_res = marian(text)
            # pipeline returns a list of dicts or a string depending on pipeline version
            if isinstance(marian_res, list) and isinstance(marian_res[0], dict):
                return marian_res[0].get('translation_text', '').strip()
            elif isinstance(marian_res, str):
                return marian_res.strip()
            else:
                return str(marian_res).strip()
        except Exception as e:
            # if Marian fails, return BLOOM output but annotate
            return bloom_out + f"\n\n[Note: fallback translator failed: {e}]"
    else:
        # No Marian model for this language; return BLOOM output
        return bloom_out

def process_news(input_text_or_url):
    if input_text_or_url.strip().startswith("http"):
        text = fetch_article(input_text_or_url.strip())
    else:
        text = input_text_or_url.strip()

    if not text or len(text) < 80:
        return " Not enough content to summarize. Paste a longer article or valid URL.", "", "", ""

    # 1) Summarize
    summary = summarize_text(text)

    # 2) Translate summary into target languages with fallback if needed
    hindi = translate_text_with_fallback(summary, "Hindi")
    french = translate_text_with_fallback(summary, "French")
    spanish = translate_text_with_fallback(summary, "Spanish")

    return summary, hindi, french, spanish

app = gr.Interface(
    fn=process_news,
    inputs=gr.Textbox(label="Enter news article text or URL", lines=5, placeholder="Paste text or URL here..."),
    outputs=[
        gr.Textbox(label="English Summary"),
        gr.Textbox(label="Hindi Translation"),
        gr.Textbox(label="French Translation"),
        gr.Textbox(label="Spanish Translation")
    ],
    title="BLOOM Multilingual Summarizer & Reliable Translations",
    description="Summarizes articles with BLOOM and ensures correct translations (BLOOM primary, Marian models fallback)."
)


app.launch()