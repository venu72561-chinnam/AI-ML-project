# -*- coding: utf-8 -*-
"""vectordb embedding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wrSsy0ynTIsta1su9Mf78JFHrYapt7b
"""

!pip install -q chromadb sentence-transformers

documents = [
    "The Taj Mahal is located in Agra, India. It was built by Mughal Emperor Shah Jahan.",
    "Python is a popular programming language for AI and data science.",
    "The solar system has eight planets revolving around the sun.",
    "The cat sat on the mat.",
]

from sentence_transformers import SentenceTransformer
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

embeddings = embedding_model.encode(documents).tolist()

import chromadb
from chromadb.config import Settings

client = chromadb.PersistentClient(path="./chroma_db")

collection = client.get_or_create_collection(name="rag_demo")

for i, (doc, emb) in enumerate(zip(documents, embeddings)):
    collection.add(
        documents=[doc],
        embeddings=[emb],
        ids=[str(i)]
    )

query = "Where is the Taj Mahal?"
query_embedding = embedding_model.encode(query).tolist()

results = collection.query(
    query_embeddings=[query_embedding],
    n_results=1
)

print("\nQuery Results:")

for i, result in enumerate(results['documents'][0]):
    print(f"{i+1}. {result}")

count = collection.count()
print(f"Number of items in the collection: {count}")

include=['embeddings', 'documents', 'metadatas'] # Specify what to include in the results

retrieved_items = collection.get(include=include)

print("\nRetrieved Items:")

retrieved_items = collection.get(include=include)

print("\nRetrieved Items:")
for i, item_id in enumerate(retrieved_items['ids']):
    print(f"Item ID: {item_id}")
    print(f"Document: {retrieved_items['documents'][i]}")
    # print(f"Embedding: {retrieved_items['embeddings'][i]}") # Uncomment to see embeddings
    # print(f"Metadata: {retrieved_items['metadatas'][i]}") # Uncomment to see metadatas
    print("-" * 20)

from google.colab import files

uploaded_files = files.upload()

!pip install -q PyMuPDF

import fitz  # PyMuPDF

extracted_texts = {}
for filename, content in uploaded_files.items():
    try:
        # Save the uploaded file temporarily to process it with PyMuPDF
        with open(filename, 'wb') as f:
            f.write(content)

        # Open the PDF file
        doc = fitz.open(filename)
        text = ""
        for page_num in range(doc.page_count):
            page = doc.load_page(page_num)
            text += page.get_text()

        extracted_texts[filename] = text
        print(f"Processed file: {filename}")

    except Exception as e:
        print(f"Error processing file {filename}: {e}")

print("\nExtracted Texts:")
for filename, text in extracted_texts.items():
    print(f"--- {filename} ---")
    print(text[:200] + "..." if len(text) > 200 else text) # Print first 200 characters
    print("-" * 20)

new_embeddings = {}
for filename, text in extracted_texts.items():
    try:
        embedding = embedding_model.encode(text).tolist()
        new_embeddings[filename] = embedding
        print(f"Generated embedding for: {filename}")
    except Exception as e:
        print(f"Error generating embedding for {filename}: {e}")

print("\nGenerated Embeddings (first 5 elements):")
for filename, embedding in new_embeddings.items():
    print(f"--- {filename} ---")
    print(embedding[:5])
    print("-" * 20)

try:
    for filename, text in extracted_texts.items():
        embedding = new_embeddings.get(filename)
        if embedding:
            collection.add(
                documents=[text],
                embeddings=[embedding],
                ids=[filename]  # Using filename as the ID
            )
            print(f"Added document '{filename}' to ChromaDB.")
        else:
            print(f"Skipping '{filename}' as embedding was not generated.")

    print("\nSuccessfully added new documents to ChromaDB.")

except Exception as e:
    print(f"Error adding documents to ChromaDB: {e}")

print(f"Number of items in the collection: {count}")

retrieved_items = collection.get(
    ids=["0", "1", "Resume2025V2.pdf"], # Example: retrieve items with ids "0", "1" and the new document's filename
    include=['embeddings', 'documents', 'metadatas'] # Specify what to include in the results
)

print("\nRetrieved Items:")
for i, item_id in enumerate(retrieved_items['ids']):
    print(f"Item ID: {item_id}")
    print(f"Document: {retrieved_items['documents'][i][:200]}...") # Print first 200 characters of the document
    # print(f"Embedding: {retrieved_items['embeddings'][i]}") # Uncomment to see embeddings
    # print(f"Metadata: {retrieved_items['metadatas'][i]}") # Uncomment to see metadatas
    print("-" * 20)