# -*- coding: utf-8 -*-
"""credit card assign

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cVBGmGQN3RqoDqjFsWITfKKlt4B6KE46
"""

!pip install pandas

!pip install numpy

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

creditcard=pd.read_csv('/content/creditcard 2.csv')

df=pd.read_csv('/content/creditcard 2.csv')

creditcard.tail()

creditcard.shape

creditcard.info()

creditcard.describe()

creditcard.columns

missing = df.isna().sum().sort_values(ascending=False)
print("\nMissing Values:\n", missing)

print("\nDuplicate rows:", df.duplicated().sum())

# 5) Separate numeric & categorical columns
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
categorical_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()

print("\nNumeric columns:", numeric_cols)
print("Categorical columns:", categorical_cols)

# Optional: Extract brand from creditcardv1
if "creditcardv1" in df.columns:
    df["v1"] = (
        df["creditcardv1"]
        .astype(str)
        .str.strip()
        .str.split(" ")
        .str[0]
        .str.lower()
        .str.replace("-", "", regex=False)
        .str.replace(".", "", regex=False)
    )
    if "v1" not in categorical_cols:
        categorical_cols.append("v1")

# 6) Descriptive statistics for numeric columns
print("\nNumeric Descriptive Statistics:\n", df[numeric_cols].describe().T)

# 7) Categorical summaries
for col in categorical_cols:
    print(f"\nValue counts for {col}:\n", df[col].value_counts())

# 8) Amount Distribution
if "Amount" in df.columns:
    # Histogram
    plt.figure(figsize=(6,4))
    plt.hist(df["Amount"], bins=20, color='skyblue', edgecolor='black')
    plt.title("Transaction Amount Distribution")
    plt.xlabel("Amount")
    plt.ylabel("Frequency")
    plt.show()

    # Boxplot
    plt.figure(figsize=(4,4))
    plt.boxplot(df["Amount"], vert=True)
    plt.title("Transaction Amount Boxplot")
    plt.ylabel("Amount")
    plt.show()

# 9) Correlation heatmap
if "Amount" in df.columns:
    corr = df[numeric_cols].corr()
    plt.figure(figsize=(10,8))
    plt.imshow(corr, cmap='coolwarm', aspect='auto')
    plt.colorbar()
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.title("Correlation Heatmap")
    plt.show()

    # Correlation with Amount
    corr_amount = corr["Amount"].sort_values(ascending=False)
    print("\nCorrelation with Amount:\n", corr_amount)

